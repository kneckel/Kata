/* Persistent Bugger - 6kyu - c#
Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

For example:

 persistence(39) == 3 // because 3*9 = 27, 2*7 = 14, 1*4=4
                      // and 4 has only one digit

 persistence(999) == 4 // because 9*9*9 = 729, 7*2*9 = 126,
                       // 1*2*6 = 12, and finally 1*2 = 2

 persistence(4) == 0 // because 4 is already a one-digit number
*/

using System;
using System.Linq;
using System.Collections.Generic;

public class Persist 
{
	public static int Persistence(long n) 
	{
	  	var countTransaction = 0;
      int newNum = (int)n;
      while(newNum.ToString().Length > 1){      
        var stringDigits = newNum.ToString();
        var digits = stringDigits.Select(x => Convert.ToInt32(x.ToString())).ToList();
         newNum = digits.Aggregate(1,(a, b) => a * b);
           countTransaction++;
      }
      return countTransaction;
  }
}
